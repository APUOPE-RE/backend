/*
 * This file is generated by jOOQ.
 */
package com.apuope.apuope_re.jooq.tables;


import com.apuope.apuope_re.jooq.Apuope;
import com.apuope.apuope_re.jooq.Keys;
import com.apuope.apuope_re.jooq.tables.MultipleChoiceQuestions.MultipleChoiceQuestionsPath;
import com.apuope.apuope_re.jooq.tables.QuizResult.QuizResultPath;
import com.apuope.apuope_re.jooq.tables.Users.UsersPath;
import com.apuope.apuope_re.jooq.tables.records.QuizRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Quiz extends TableImpl<QuizRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>apuope.quiz</code>
     */
    public static final Quiz QUIZ = new Quiz();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizRecord> getRecordType() {
        return QuizRecord.class;
    }

    /**
     * The column <code>apuope.quiz.id</code>.
     */
    public final TableField<QuizRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>apuope.quiz.account_id</code>.
     */
    public final TableField<QuizRecord, Integer> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>apuope.quiz.lecture_id</code>.
     */
    public final TableField<QuizRecord, Integer> LECTURE_ID = createField(DSL.name("lecture_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>apuope.quiz.max_points</code>.
     */
    public final TableField<QuizRecord, Integer> MAX_POINTS = createField(DSL.name("max_points"), SQLDataType.INTEGER.nullable(false), this, "");

    private Quiz(Name alias, Table<QuizRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Quiz(Name alias, Table<QuizRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>apuope.quiz</code> table reference
     */
    public Quiz(String alias) {
        this(DSL.name(alias), QUIZ);
    }

    /**
     * Create an aliased <code>apuope.quiz</code> table reference
     */
    public Quiz(Name alias) {
        this(alias, QUIZ);
    }

    /**
     * Create a <code>apuope.quiz</code> table reference
     */
    public Quiz() {
        this(DSL.name("quiz"), null);
    }

    public <O extends Record> Quiz(Table<O> path, ForeignKey<O, QuizRecord> childPath, InverseForeignKey<O, QuizRecord> parentPath) {
        super(path, childPath, parentPath, QUIZ);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class QuizPath extends Quiz implements Path<QuizRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> QuizPath(Table<O> path, ForeignKey<O, QuizRecord> childPath, InverseForeignKey<O, QuizRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private QuizPath(Name alias, Table<QuizRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public QuizPath as(String alias) {
            return new QuizPath(DSL.name(alias), this);
        }

        @Override
        public QuizPath as(Name alias) {
            return new QuizPath(alias, this);
        }

        @Override
        public QuizPath as(Table<?> alias) {
            return new QuizPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Apuope.APUOPE;
    }

    @Override
    public Identity<QuizRecord, Integer> getIdentity() {
        return (Identity<QuizRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<QuizRecord> getPrimaryKey() {
        return Keys.QUIZ_PKEY;
    }

    @Override
    public List<ForeignKey<QuizRecord, ?>> getReferences() {
        return Arrays.asList(Keys.QUIZ__FK_ACCOUNT);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>apuope.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.QUIZ__FK_ACCOUNT, null);

        return _users;
    }

    private transient MultipleChoiceQuestionsPath _multipleChoiceQuestions;

    /**
     * Get the implicit to-many join path to the
     * <code>apuope.multiple_choice_questions</code> table
     */
    public MultipleChoiceQuestionsPath multipleChoiceQuestions() {
        if (_multipleChoiceQuestions == null)
            _multipleChoiceQuestions = new MultipleChoiceQuestionsPath(this, null, Keys.MULTIPLE_CHOICE_QUESTIONS__FK_QUIZ.getInverseKey());

        return _multipleChoiceQuestions;
    }

    private transient QuizResultPath _quizResult;

    /**
     * Get the implicit to-many join path to the <code>apuope.quiz_result</code>
     * table
     */
    public QuizResultPath quizResult() {
        if (_quizResult == null)
            _quizResult = new QuizResultPath(this, null, Keys.QUIZ_RESULT__FK_QUIZ.getInverseKey());

        return _quizResult;
    }

    @Override
    public Quiz as(String alias) {
        return new Quiz(DSL.name(alias), this);
    }

    @Override
    public Quiz as(Name alias) {
        return new Quiz(alias, this);
    }

    @Override
    public Quiz as(Table<?> alias) {
        return new Quiz(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quiz rename(String name) {
        return new Quiz(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quiz rename(Name name) {
        return new Quiz(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quiz rename(Table<?> name) {
        return new Quiz(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Quiz where(Condition condition) {
        return new Quiz(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Quiz where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Quiz where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Quiz where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Quiz where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Quiz where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Quiz where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Quiz where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Quiz whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Quiz whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
