/*
 * This file is generated by jOOQ.
 */
package com.apuope.apuope_re.jooq.tables;


import com.apuope.apuope_re.jooq.Apuope;
import com.apuope.apuope_re.jooq.Keys;
import com.apuope.apuope_re.jooq.tables.Quiz.QuizPath;
import com.apuope.apuope_re.jooq.tables.QuizAnswers.QuizAnswersPath;
import com.apuope.apuope_re.jooq.tables.Users.UsersPath;
import com.apuope.apuope_re.jooq.tables.records.QuizResultRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QuizResult extends TableImpl<QuizResultRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>apuope.quiz_result</code>
     */
    public static final QuizResult QUIZ_RESULT = new QuizResult();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizResultRecord> getRecordType() {
        return QuizResultRecord.class;
    }

    /**
     * The column <code>apuope.quiz_result.id</code>.
     */
    public final TableField<QuizResultRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>apuope.quiz_result.account_id</code>.
     */
    public final TableField<QuizResultRecord, Integer> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>apuope.quiz_result.quiz_id</code>.
     */
    public final TableField<QuizResultRecord, Integer> QUIZ_ID = createField(DSL.name("quiz_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>apuope.quiz_result.score</code>.
     */
    public final TableField<QuizResultRecord, Integer> SCORE = createField(DSL.name("score"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>apuope.quiz_result.max_score</code>.
     */
    public final TableField<QuizResultRecord, Integer> MAX_SCORE = createField(DSL.name("max_score"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>apuope.quiz_result.datetime</code>.
     */
    public final TableField<QuizResultRecord, LocalDateTime> DATETIME = createField(DSL.name("datetime"), SQLDataType.LOCALDATETIME(6), this, "");

    private QuizResult(Name alias, Table<QuizResultRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private QuizResult(Name alias, Table<QuizResultRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>apuope.quiz_result</code> table reference
     */
    public QuizResult(String alias) {
        this(DSL.name(alias), QUIZ_RESULT);
    }

    /**
     * Create an aliased <code>apuope.quiz_result</code> table reference
     */
    public QuizResult(Name alias) {
        this(alias, QUIZ_RESULT);
    }

    /**
     * Create a <code>apuope.quiz_result</code> table reference
     */
    public QuizResult() {
        this(DSL.name("quiz_result"), null);
    }

    public <O extends Record> QuizResult(Table<O> path, ForeignKey<O, QuizResultRecord> childPath, InverseForeignKey<O, QuizResultRecord> parentPath) {
        super(path, childPath, parentPath, QUIZ_RESULT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class QuizResultPath extends QuizResult implements Path<QuizResultRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> QuizResultPath(Table<O> path, ForeignKey<O, QuizResultRecord> childPath, InverseForeignKey<O, QuizResultRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private QuizResultPath(Name alias, Table<QuizResultRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public QuizResultPath as(String alias) {
            return new QuizResultPath(DSL.name(alias), this);
        }

        @Override
        public QuizResultPath as(Name alias) {
            return new QuizResultPath(alias, this);
        }

        @Override
        public QuizResultPath as(Table<?> alias) {
            return new QuizResultPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Apuope.APUOPE;
    }

    @Override
    public Identity<QuizResultRecord, Integer> getIdentity() {
        return (Identity<QuizResultRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<QuizResultRecord> getPrimaryKey() {
        return Keys.QUIZ_RESULT_PKEY;
    }

    @Override
    public List<ForeignKey<QuizResultRecord, ?>> getReferences() {
        return Arrays.asList(Keys.QUIZ_RESULT__FK_ACCOUNT, Keys.QUIZ_RESULT__FK_QUIZ);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>apuope.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.QUIZ_RESULT__FK_ACCOUNT, null);

        return _users;
    }

    private transient QuizPath _quiz;

    /**
     * Get the implicit join path to the <code>apuope.quiz</code> table.
     */
    public QuizPath quiz() {
        if (_quiz == null)
            _quiz = new QuizPath(this, Keys.QUIZ_RESULT__FK_QUIZ, null);

        return _quiz;
    }

    private transient QuizAnswersPath _quizAnswers;

    /**
     * Get the implicit to-many join path to the
     * <code>apuope.quiz_answers</code> table
     */
    public QuizAnswersPath quizAnswers() {
        if (_quizAnswers == null)
            _quizAnswers = new QuizAnswersPath(this, null, Keys.QUIZ_ANSWERS__FK_QUIZ_RESULT.getInverseKey());

        return _quizAnswers;
    }

    @Override
    public QuizResult as(String alias) {
        return new QuizResult(DSL.name(alias), this);
    }

    @Override
    public QuizResult as(Name alias) {
        return new QuizResult(alias, this);
    }

    @Override
    public QuizResult as(Table<?> alias) {
        return new QuizResult(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizResult rename(String name) {
        return new QuizResult(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizResult rename(Name name) {
        return new QuizResult(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizResult rename(Table<?> name) {
        return new QuizResult(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuizResult where(Condition condition) {
        return new QuizResult(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuizResult where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuizResult where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuizResult where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuizResult where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuizResult where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuizResult where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuizResult where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuizResult whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuizResult whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
