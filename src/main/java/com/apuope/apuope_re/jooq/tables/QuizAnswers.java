/*
 * This file is generated by jOOQ.
 */
package com.apuope.apuope_re.jooq.tables;


import com.apuope.apuope_re.jooq.Apuope;
import com.apuope.apuope_re.jooq.Keys;
import com.apuope.apuope_re.jooq.tables.MultipleChoiceQuestions.MultipleChoiceQuestionsPath;
import com.apuope.apuope_re.jooq.tables.QuizResult.QuizResultPath;
import com.apuope.apuope_re.jooq.tables.records.QuizAnswersRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class QuizAnswers extends TableImpl<QuizAnswersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>apuope.quiz_answers</code>
     */
    public static final QuizAnswers QUIZ_ANSWERS = new QuizAnswers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizAnswersRecord> getRecordType() {
        return QuizAnswersRecord.class;
    }

    /**
     * The column <code>apuope.quiz_answers.id</code>.
     */
    public final TableField<QuizAnswersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>apuope.quiz_answers.quiz_result_id</code>.
     */
    public final TableField<QuizAnswersRecord, Integer> QUIZ_RESULT_ID = createField(DSL.name("quiz_result_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>apuope.quiz_answers.question_id</code>.
     */
    public final TableField<QuizAnswersRecord, Integer> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>apuope.quiz_answers.question_number</code>.
     */
    public final TableField<QuizAnswersRecord, Integer> QUESTION_NUMBER = createField(DSL.name("question_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>apuope.quiz_answers.answer</code>.
     */
    public final TableField<QuizAnswersRecord, String> ANSWER = createField(DSL.name("answer"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>apuope.quiz_answers.correct</code>.
     */
    public final TableField<QuizAnswersRecord, Boolean> CORRECT = createField(DSL.name("correct"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>apuope.quiz_answers.points</code>.
     */
    public final TableField<QuizAnswersRecord, Integer> POINTS = createField(DSL.name("points"), SQLDataType.INTEGER, this, "");

    private QuizAnswers(Name alias, Table<QuizAnswersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private QuizAnswers(Name alias, Table<QuizAnswersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>apuope.quiz_answers</code> table reference
     */
    public QuizAnswers(String alias) {
        this(DSL.name(alias), QUIZ_ANSWERS);
    }

    /**
     * Create an aliased <code>apuope.quiz_answers</code> table reference
     */
    public QuizAnswers(Name alias) {
        this(alias, QUIZ_ANSWERS);
    }

    /**
     * Create a <code>apuope.quiz_answers</code> table reference
     */
    public QuizAnswers() {
        this(DSL.name("quiz_answers"), null);
    }

    public <O extends Record> QuizAnswers(Table<O> path, ForeignKey<O, QuizAnswersRecord> childPath, InverseForeignKey<O, QuizAnswersRecord> parentPath) {
        super(path, childPath, parentPath, QUIZ_ANSWERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class QuizAnswersPath extends QuizAnswers implements Path<QuizAnswersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> QuizAnswersPath(Table<O> path, ForeignKey<O, QuizAnswersRecord> childPath, InverseForeignKey<O, QuizAnswersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private QuizAnswersPath(Name alias, Table<QuizAnswersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public QuizAnswersPath as(String alias) {
            return new QuizAnswersPath(DSL.name(alias), this);
        }

        @Override
        public QuizAnswersPath as(Name alias) {
            return new QuizAnswersPath(alias, this);
        }

        @Override
        public QuizAnswersPath as(Table<?> alias) {
            return new QuizAnswersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Apuope.APUOPE;
    }

    @Override
    public Identity<QuizAnswersRecord, Integer> getIdentity() {
        return (Identity<QuizAnswersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<QuizAnswersRecord> getPrimaryKey() {
        return Keys.QUIZ_ANSWERS_PKEY;
    }

    @Override
    public List<ForeignKey<QuizAnswersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.QUIZ_ANSWERS__FK_MULTIPLE_CHOICE_QUESTIONS, Keys.QUIZ_ANSWERS__FK_QUIZ_RESULT);
    }

    private transient MultipleChoiceQuestionsPath _multipleChoiceQuestions;

    /**
     * Get the implicit join path to the
     * <code>apuope.multiple_choice_questions</code> table.
     */
    public MultipleChoiceQuestionsPath multipleChoiceQuestions() {
        if (_multipleChoiceQuestions == null)
            _multipleChoiceQuestions = new MultipleChoiceQuestionsPath(this, Keys.QUIZ_ANSWERS__FK_MULTIPLE_CHOICE_QUESTIONS, null);

        return _multipleChoiceQuestions;
    }

    private transient QuizResultPath _quizResult;

    /**
     * Get the implicit join path to the <code>apuope.quiz_result</code> table.
     */
    public QuizResultPath quizResult() {
        if (_quizResult == null)
            _quizResult = new QuizResultPath(this, Keys.QUIZ_ANSWERS__FK_QUIZ_RESULT, null);

        return _quizResult;
    }

    @Override
    public QuizAnswers as(String alias) {
        return new QuizAnswers(DSL.name(alias), this);
    }

    @Override
    public QuizAnswers as(Name alias) {
        return new QuizAnswers(alias, this);
    }

    @Override
    public QuizAnswers as(Table<?> alias) {
        return new QuizAnswers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizAnswers rename(String name) {
        return new QuizAnswers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizAnswers rename(Name name) {
        return new QuizAnswers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizAnswers rename(Table<?> name) {
        return new QuizAnswers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuizAnswers where(Condition condition) {
        return new QuizAnswers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuizAnswers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuizAnswers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuizAnswers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuizAnswers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuizAnswers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuizAnswers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public QuizAnswers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuizAnswers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public QuizAnswers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
