/*
 * This file is generated by jOOQ.
 */
package com.apuope.apuope_re.jooq.tables;


import com.apuope.apuope_re.jooq.Apuope;
import com.apuope.apuope_re.jooq.Keys;
import com.apuope.apuope_re.jooq.tables.Quiz.QuizPath;
import com.apuope.apuope_re.jooq.tables.QuizAnswers.QuizAnswersPath;
import com.apuope.apuope_re.jooq.tables.records.MultipleChoiceQuestionsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MultipleChoiceQuestions extends TableImpl<MultipleChoiceQuestionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>apuope.multiple_choice_questions</code>
     */
    public static final MultipleChoiceQuestions MULTIPLE_CHOICE_QUESTIONS = new MultipleChoiceQuestions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MultipleChoiceQuestionsRecord> getRecordType() {
        return MultipleChoiceQuestionsRecord.class;
    }

    /**
     * The column <code>apuope.multiple_choice_questions.id</code>.
     */
    public final TableField<MultipleChoiceQuestionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>apuope.multiple_choice_questions.quiz_id</code>.
     */
    public final TableField<MultipleChoiceQuestionsRecord, Integer> QUIZ_ID = createField(DSL.name("quiz_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>apuope.multiple_choice_questions.question_id</code>.
     */
    public final TableField<MultipleChoiceQuestionsRecord, Integer> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>apuope.multiple_choice_questions.question</code>.
     */
    public final TableField<MultipleChoiceQuestionsRecord, String> QUESTION = createField(DSL.name("question"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>apuope.multiple_choice_questions.option_a</code>.
     */
    public final TableField<MultipleChoiceQuestionsRecord, String> OPTION_A = createField(DSL.name("option_a"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>apuope.multiple_choice_questions.option_b</code>.
     */
    public final TableField<MultipleChoiceQuestionsRecord, String> OPTION_B = createField(DSL.name("option_b"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>apuope.multiple_choice_questions.option_c</code>.
     */
    public final TableField<MultipleChoiceQuestionsRecord, String> OPTION_C = createField(DSL.name("option_c"), SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>apuope.multiple_choice_questions.correct_option</code>.
     */
    public final TableField<MultipleChoiceQuestionsRecord, String> CORRECT_OPTION = createField(DSL.name("correct_option"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>apuope.multiple_choice_questions.points</code>.
     */
    public final TableField<MultipleChoiceQuestionsRecord, Integer> POINTS = createField(DSL.name("points"), SQLDataType.INTEGER.nullable(false), this, "");

    private MultipleChoiceQuestions(Name alias, Table<MultipleChoiceQuestionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private MultipleChoiceQuestions(Name alias, Table<MultipleChoiceQuestionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>apuope.multiple_choice_questions</code> table
     * reference
     */
    public MultipleChoiceQuestions(String alias) {
        this(DSL.name(alias), MULTIPLE_CHOICE_QUESTIONS);
    }

    /**
     * Create an aliased <code>apuope.multiple_choice_questions</code> table
     * reference
     */
    public MultipleChoiceQuestions(Name alias) {
        this(alias, MULTIPLE_CHOICE_QUESTIONS);
    }

    /**
     * Create a <code>apuope.multiple_choice_questions</code> table reference
     */
    public MultipleChoiceQuestions() {
        this(DSL.name("multiple_choice_questions"), null);
    }

    public <O extends Record> MultipleChoiceQuestions(Table<O> path, ForeignKey<O, MultipleChoiceQuestionsRecord> childPath, InverseForeignKey<O, MultipleChoiceQuestionsRecord> parentPath) {
        super(path, childPath, parentPath, MULTIPLE_CHOICE_QUESTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MultipleChoiceQuestionsPath extends MultipleChoiceQuestions implements Path<MultipleChoiceQuestionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> MultipleChoiceQuestionsPath(Table<O> path, ForeignKey<O, MultipleChoiceQuestionsRecord> childPath, InverseForeignKey<O, MultipleChoiceQuestionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MultipleChoiceQuestionsPath(Name alias, Table<MultipleChoiceQuestionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MultipleChoiceQuestionsPath as(String alias) {
            return new MultipleChoiceQuestionsPath(DSL.name(alias), this);
        }

        @Override
        public MultipleChoiceQuestionsPath as(Name alias) {
            return new MultipleChoiceQuestionsPath(alias, this);
        }

        @Override
        public MultipleChoiceQuestionsPath as(Table<?> alias) {
            return new MultipleChoiceQuestionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Apuope.APUOPE;
    }

    @Override
    public Identity<MultipleChoiceQuestionsRecord, Integer> getIdentity() {
        return (Identity<MultipleChoiceQuestionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MultipleChoiceQuestionsRecord> getPrimaryKey() {
        return Keys.MULTIPLE_CHOICE_QUESTIONS_PKEY;
    }

    @Override
    public List<ForeignKey<MultipleChoiceQuestionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MULTIPLE_CHOICE_QUESTIONS__FK_QUIZ);
    }

    private transient QuizPath _quiz;

    /**
     * Get the implicit join path to the <code>apuope.quiz</code> table.
     */
    public QuizPath quiz() {
        if (_quiz == null)
            _quiz = new QuizPath(this, Keys.MULTIPLE_CHOICE_QUESTIONS__FK_QUIZ, null);

        return _quiz;
    }

    private transient QuizAnswersPath _quizAnswers;

    /**
     * Get the implicit to-many join path to the
     * <code>apuope.quiz_answers</code> table
     */
    public QuizAnswersPath quizAnswers() {
        if (_quizAnswers == null)
            _quizAnswers = new QuizAnswersPath(this, null, Keys.QUIZ_ANSWERS__FK_MULTIPLE_CHOICE_QUESTIONS.getInverseKey());

        return _quizAnswers;
    }

    @Override
    public MultipleChoiceQuestions as(String alias) {
        return new MultipleChoiceQuestions(DSL.name(alias), this);
    }

    @Override
    public MultipleChoiceQuestions as(Name alias) {
        return new MultipleChoiceQuestions(alias, this);
    }

    @Override
    public MultipleChoiceQuestions as(Table<?> alias) {
        return new MultipleChoiceQuestions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MultipleChoiceQuestions rename(String name) {
        return new MultipleChoiceQuestions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MultipleChoiceQuestions rename(Name name) {
        return new MultipleChoiceQuestions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MultipleChoiceQuestions rename(Table<?> name) {
        return new MultipleChoiceQuestions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MultipleChoiceQuestions where(Condition condition) {
        return new MultipleChoiceQuestions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MultipleChoiceQuestions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MultipleChoiceQuestions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MultipleChoiceQuestions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MultipleChoiceQuestions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MultipleChoiceQuestions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MultipleChoiceQuestions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public MultipleChoiceQuestions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MultipleChoiceQuestions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public MultipleChoiceQuestions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
